@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService


<input @bind="searchCriteria" style="width:100%; margin-top:20px; padding:5px; height:40px;" placeholder="Search">
<br>
<div>
    <button @onclick="(e => Search())" style="margin-top: 10px; margin-bottom: 10px;" class="btn btn-primary" data-toggle="cardRefresh" data-target="#cardRefresh">
        Search
    </button>
    <button @onclick="(e => Clear())" style="margin-top:10px; margin-left:5px; margin-bottom:10px;" class="btn btn-primary" data-toggle="cardRefresh" data-target="#cardRefresh">
        Clear
    </button>
</div>

<div>
    <div class="card-columns">
        @foreach (var product in ProductService.GetAllData())
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.Title</h5>
                    <a class="card-link btn btn-dark" href="./Restaurants/ChineseRestaurants/@product.Id">@product.Title</a>
                </div>
            </div>
        }
    </div>
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered"  role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }


    // Contents of the search bar
    string searchCriteria = "";
    // Contains all matched products
    List<ProductModel> returnList = new List<ProductModel>();
    // Contains all unmatched products
    List<ProductModel> missedList = new List<ProductModel>();
    // Determines when a search is made
    bool searching = false;

    /// <summary>
    /// Clears the search bar and resets the search results
    /// </summary>
    void Clear()
    {
        searching = false;
        searchCriteria = "";
    }

    /// <summary>
    /// Search function that searches the product list for any words that may be found from the search bar
    /// Creates two lists, one contains the successful searches and the other the failed searches
    /// </summary>
    void Search()
    {
        if (searchCriteria == null)
        {
            searching = false;
            return;
        }
        if (searchCriteria.Length <= 0)
        {
            searching = false;
            return;
        }
        searching = true;

        // Words from the search bar to be split into individual words
        string[] words = searchCriteria.Split(' ');
        // List of products found that contain a word from the search bar
        returnList = new List<ProductModel>();
        // List of products left that had not been matched to a word fromthe search bar
        missedList = new List<ProductModel>();

        // Eliminate search bar without contents
        if (words.Length <= 0)
        {
            return;
        }

        // Run through all products stored in the products.json
        foreach (var product in ProductService.GetAllData())
        {
            // Flag to store the product when no products are matched
            bool found = false;

            // Run through all individual words found in the search bar
            // When a match is found in any data found is flagged and the foreach loop is broken to continue
            foreach (var word in words)
            {
                if (product.Id != null && product.Id.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Maker != null && product.Maker.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Image != null && product.Image.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Url != null && product.Url.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Title != null && product.Title.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Description != null && product.Description.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
            }

            // Activated when no match is found
            if (!found)
            {
                missedList.Add(product);
            }

        }
    }

}